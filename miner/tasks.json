{"id": "591392af88a4994caa0000e0", "name": "# Counting 1: I  Want Some Subsets, Not All!", "slug": "number-counting-1-i-want-some-subsets-not-all", "category": "reference", "publishedAt": "2017-05-10T22:22:44.173Z", "approvedAt": "2018-06-06T03:00:23.427Z", "languages": ["python", "javascript", "ruby", "haskell", "csharp", "java"], "url": "https://www.codewars.com/kata/591392af88a4994caa0000e0", "rank": {"id": -6, "name": "6 kyu", "color": "yellow"}, "createdAt": "2017-05-10T22:22:39.523Z", "createdBy": {"username": "raulbc777", "url": "https://www.codewars.com/users/raulbc777"}, "approvedBy": {"username": "Voile", "url": "https://www.codewars.com/users/Voile"}, "description": "We have a set of consecutive numbers from ```1``` to ```n```.\nWe want to count all the subsets that do not contain consecutive numbers.\nE.g.\n\nIf our set ```S1``` is equal to ```[1,2,3,4,5]```\nThe subsets that fulfill these property are:\n```\n[1],[2],[3],[4],[5],[1,3],[1,4],[1,5],[2,4],[2,5],[3,5],[1,3,5]\n```\nA total of \t```12\t``` subsets.\n\nFrom the set ```S2``` equals to```[1,2,3]```, it is obvious that we have only ```4``` subsets and are:\n```\n[1],[2],[3],[1,3]\n```\nMake a code that may give the amount of all these subsets for any integer \t```n >= 2\t```.\n\nFeatures of the random tests:\n```\nnumber of tests = 100 \n10 <= n <= 120\n```", "totalAttempts": 703, "totalCompleted": 166, "totalStars": 17, "voteScore": 54, "tags": ["Number Theory", "Fundamentals"], "contributorsWanted": true, "unresolved": {"issues": 1, "suggestions": 0}}
{"id": "56e8d06029035a0c7c001d85", "name": "\u25a0\u25a1 Pattern \u25a1\u25a0 : Heart", "slug": "number-number-pattern-number-number-heart", "category": "games", "publishedAt": "2016-03-16T04:21:22.199Z", "approvedAt": "2018-01-20T11:46:55.946Z", "languages": ["javascript", "python"], "url": "https://www.codewars.com/kata/56e8d06029035a0c7c001d85", "rank": {"id": -6, "name": "6 kyu", "color": "yellow"}, "createdAt": "2016-03-16T03:17:52.961Z", "createdBy": {"username": "myjinxin2015", "url": "https://www.codewars.com/users/myjinxin2015"}, "approvedBy": {"username": "Voile", "url": "https://www.codewars.com/users/Voile"}, "description": "       \n## Task:\n  * Complete the pattern using the following set of characters: `\u25a0`,`\u2003`, `\u25e5`, `\u25e4`, `\u25e3`, `\u25e2`\n  * In this kata, we need draw a Heart.\n\n## Rules:\n  -  parameter `n`  The width of heart, an even number, n>=6, the heart's height increases with n, look at example.\n  -  return a string, `\u25a0\u2003\u25e5\u25e4\u25e3\u25e2` represents the heart, and ```Full width space character``` pad at heart's left and right side.\n\n## Examples:\n\n(Please do not mind the black stripes, this is codewars description display effect, not perfect)\n\n<div style=\"width:320px\">\ndraw(6)\n<div style=\"\n        font-family:courrier;\n        display:grid;\n        grid-template-rows:    repeat(5, 0.9em);\n        grid-template-columns: repeat(6, 0.9em);\n        justify-items: center;\n        align-content: center;\n    \"><div>\u25e2</div><div>\u25a0</div><div>\u25e3</div><div>\u25e2</div><div>\u25a0</div><div>\u25e3</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div></div>\n\ndraw(8)\n<div style=\"\n        font-family:courrier;\n        display:grid;\n        grid-template-rows:    repeat(6, 0.9em);\n        grid-template-columns: repeat(8, 0.9em);\n        justify-items: center;\n        align-content: center;\n    \"><div>\u25e2</div><div>\u25a0</div><div>\u25a0</div><div>\u25e3</div><div>\u25e2</div><div>\u25a0</div><div>\u25a0</div><div>\u25e3</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div></div>\n\ndraw(10)\n<div style=\"\n        font-family:courrier;\n        display:grid;\n        grid-template-rows:    repeat(7, 0.9em);\n        grid-template-columns: repeat(10, 0.9em);\n        justify-items: center;\n        align-content: center;\n    \"><div>\u25e2</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e3</div><div>\u25e2</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e3</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div></div>\n\ndraw(12)\n<div style=\"\n        font-family:courrier;\n        display:grid;\n        grid-template-rows:    repeat(9, 0.9em);\n        grid-template-columns: repeat(12, 0.9em);\n        justify-items: center;\n        align-content: center;\n    \"><div>\u25e2</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e3</div><div>\u25e2</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e3</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div></div>\n\ndraw(18)\n<div style=\"\n        font-family:courrier;\n        display:grid;\n        grid-template-rows:    repeat(13, 0.9em);\n        grid-template-columns: repeat(18, 0.9em);\n        justify-items: center;\n        align-content: center;\n    \"><div>\u25e2</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e3</div><div>\u25e2</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e3</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25a0</div><div>\u25a0</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u25e5</div><div>\u25e4</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div><div>\u2003</div></div>\n\n", "totalAttempts": 626, "totalCompleted": 156, "totalStars": 10, "voteScore": 54, "tags": ["ASCII Art"], "contributorsWanted": true, "unresolved": {"issues": 1, "suggestions": 0}}
{"id": "58693136b98de0e4910001ab", "name": "Simple decrypt algo", "slug": "simple-decrypt-algo", "category": "reference", "publishedAt": "2017-01-01T16:57:32.094Z", "approvedAt": "2017-01-05T11:08:33.753Z", "languages": ["python", "haskell", "c", "ruby", "javascript"], "url": "https://www.codewars.com/kata/58693136b98de0e4910001ab", "rank": {"id": -6, "name": "6 kyu", "color": "yellow"}, "createdAt": "2017-01-01T16:41:26.309Z", "createdBy": {"username": "mkelty", "url": "https://www.codewars.com/users/mkelty"}, "approvedBy": {"username": "damjan", "url": "https://www.codewars.com/users/damjan"}, "description": "You'll be given a string of random characters (numbers, letters, and symbols). To decode this string into the key we're searching for: \n\n\n(1) count the number occurences of each ascii lowercase letter, and\n\n(2) return an ordered string, 26 places long, corresponding to the number of occurences for each corresponding letter in the alphabet.\n\nFor example:\n```python\n'$aaaa#bbb*cc^fff!z' gives '43200300000000000000000001'\n   ^    ^   ^  ^  ^         ^^^  ^                   ^\n  [4]  [3] [2][3][1]        abc  f                   z\n  \n'z$aaa#ccc%eee1234567890' gives '30303000000000000000000001'\n ^  ^   ^   ^                    ^ ^ ^                    ^\n[1][3] [3] [3]                   a c e                    z\n```\nRemember, the string returned should always be 26 characters long, and only count lowercase letters. \n\nNote: You can assume that each lowercase letter will appears a maximum of 9 times in the input string.", "totalAttempts": 2438, "totalCompleted": 1007, "totalStars": 20, "voteScore": 204, "tags": ["Strings", "Fundamentals"], "contributorsWanted": true, "unresolved": {"issues": 0, "suggestions": 2}}
{"id": "630647be37f67000363dff04", "name": "Playing Cards Draw Order \u2013 Part 1", "slug": "playing-cards-draw-order-part-1", "category": "algorithms", "publishedAt": "2022-09-02T12:46:02.938Z", "approvedAt": "2022-09-13T13:14:21.475Z", "languages": ["typescript", "javascript"], "url": "https://www.codewars.com/kata/630647be37f67000363dff04", "rank": {"id": -7, "name": "7 kyu", "color": "white"}, "createdAt": "2022-08-24T15:46:06.084Z", "createdBy": {"username": "Zwyx", "url": "https://www.codewars.com/users/Zwyx"}, "approvedBy": {"username": "zLuki", "url": "https://www.codewars.com/users/zLuki"}, "description": "<div style=\"width: 100%; margin: 16px 0; border-top: 1px solid grey;\" />\n\n- This is Part 1 of this series of two katas \u2014 Part 2 is [here](https://www.codewars.com/kata/6311b2ce73f648002577f04a).\n- If you like playing cards, have also a look at [Hide a message in a deck of playing cards](https://www.codewars.com/kata/59b9a92a6236547247000110) and [Card-Chameleon, a Cipher with Playing cards](https://www.codewars.com/kata/59c2ff946bddd2a2fd00009e).\n\n<div style=\"width: 100%; margin: 16px 0; border-top: 1px solid grey;\" />\n\nIn this series of two katas, we will draw playing cards from a deck using a particular procedure: after drawing one card, we place the next one at the bottom of the deck.\n\nIn details, the procedure is:\n\n1. We draw the top card of the deck.\n2. We take the next card, and put it at the bottom of the deck.\n3. We repeat steps 1 and 2 until there aren't any card left in the deck.\n\nLet's take a small deck containing four cards \u2014 named A, B, C, D \u2014 as an example:\n\n1. The deck order is `A-B-C-D` at the beginning, the card `A` is at the top and `D` at the bottom.\n2. `A` is drawn. The deck is now `B-C-D`.\n3. `B` is placed at the bottom of the deck. The deck is now `C-D-B`.\n4. `C` is drawn. The deck is now `D-B`.\n5. `D` is placed at the bottom of the deck. The deck is now `B-D`.\n6. `B` is drawn. The deck is now `D`.\n7. `D` is drawn.\n\nThe order of the cards drawn is `A-C-B-D`.\n\n# Your task\n\nWrite a function accepting a deck of cards as argument, and returning the cards drawn following the procedure.\n\n```javascript\nconst draw = (deck) => {\n```\n\n```typescript\nexport const draw = (deck: string[]): string[] => {\n```\n\nEach card is represented with a two-character string: the rank of the card and its suit.\n\n`AC 2C 3C 4C 5C 6C 7C 8C 9C TC JC QC KC` for the Clubs<br />\n`AD 2D 3D 4D 5D 6D 7D 8D 9D TD JD QD KD` for the Diamonds<br />\n`AH 2H 3H 4H 5H 6H 7H 8H 9H TH JH QH KH` for the Hearts<br />\n`AS 2S 3S 4S 5S 6S 7S 8S 9S TS JS QS KS` for the Spades<br />\n\nA preloaded function allows to easily print a deck to the console:\n\n```javascript\nprintDeck(deck, unicode);\n```\n\n```typescript\nimport { printDeck } from \"./preloaded\";\n\nprintDeck(deck, unicode);\n```\n\nThe first argument is the deck to print, the second one is a boolean value allowing the selection of the character set: regular or Unicode (for which a font containing the playing cards characters needs to be installed on your system).\n\n# Example\n\n```javascript\nconst deck = [\"KC\", \"KH\", \"QC\", \"KS\", \"KD\", \"QH\", \"QD\", \"QS\"];\n\ndraw(deck);\n```\n\n```typescript\nconst deck = [\"KC\", \"KH\", \"QC\", \"KS\", \"KD\", \"QH\", \"QD\", \"QS\"];\n\ndraw(deck);\n```\n\nshould return:\n\n```javascript\n[\"KC\", \"QC\", \"KD\", \"QD\", \"KH\", \"QH\", \"KS\", \"QS\"];\n```\n\n```typescript\n[\"KC\", \"QC\", \"KD\", \"QD\", \"KH\", \"QH\", \"KS\", \"QS\"];\n```\n\n# Have fun!\n\nI hope you will enjoy this kata! Feedbacks and translations are very welcome.\n\nAfter this one, jump to [Part 2](https://www.codewars.com/kata/6311b2ce73f648002577f04a), where we will be ordering the deck to be drawn to have a chosen result!\n", "totalAttempts": 625, "totalCompleted": 157, "totalStars": 8, "voteScore": 64, "tags": ["Mathematics", "Games", "Permutations"], "contributorsWanted": true, "unresolved": {"issues": 0, "suggestions": 0}}
{"id": "5966a52ab4f24db1800000cc", "name": "A + B == 123", "slug": "a-plus-b-equals-equals-123", "category": "reference", "publishedAt": "2017-07-15T08:33:51.941Z", "approvedAt": "2017-07-15T13:19:31.532Z", "languages": ["java", "groovy", "kotlin", "csharp", "c"], "url": "https://www.codewars.com/kata/5966a52ab4f24db1800000cc", "rank": {"id": -6, "name": "6 kyu", "color": "yellow"}, "createdAt": "2017-07-12T22:39:38.475Z", "createdBy": {"username": "dinglemouse", "url": "https://www.codewars.com/users/dinglemouse"}, "approvedBy": {"username": "ice1000", "url": "https://www.codewars.com/users/ice1000"}, "description": "# Task\n\nGiven number `A` you must return number `B` so that\n\n```java\n(int) (A + B) == 123\n```\n\n## Note\n\n`B` can't be negative \n\n:-)", "totalAttempts": 5842, "totalCompleted": 871, "totalStars": 46, "voteScore": 171, "tags": ["Fundamentals"], "contributorsWanted": true, "unresolved": {"issues": 0, "suggestions": 0}}
{"id": "61488fde47472d000827a51d", "name": "Is this a valid Chess960 position?", "slug": "is-this-a-valid-chess960-position", "category": "reference", "publishedAt": "2021-09-20T13:43:30.121Z", "approvedAt": "2022-10-05T20:51:25.764Z", "languages": ["scala", "javascript", "python"], "url": "https://www.codewars.com/kata/61488fde47472d000827a51d", "rank": {"id": -7, "name": "7 kyu", "color": "white"}, "createdAt": "2021-09-20T13:42:54.132Z", "createdBy": {"username": "LegendaryFartMaster", "url": "https://www.codewars.com/users/LegendaryFartMaster"}, "approvedBy": {"username": "Chris_Rands", "url": "https://www.codewars.com/users/Chris_Rands"}, "description": "Fischer random chess, also known as Chess960, is a variant of chess, invented by Bobby Fischer on June 19, 1996.\n\nThe rules are the same as regular chess, but the starting position is randomized according to the **Randomization Rules**. Note that prior knowledge of chess is not required to solve this kata, however some basic knowledge like piece distribution, initial setup, ranks vs files etc. is assumed. [Here](https://en.wikipedia.org/wiki/Chess#Setup) is a quick refresher.\n\n\n**Randomization Rules**\n 1) The 2nd and 7th rank stay the same as in a normal game, filled with pawns.\n 2) All the remaining white pieces must be on the 1st rank, and black pieces on the 8th rank.\n 3) The two bishops must start on differently colored squares.\n 4) The rooks must be located on either side of the king; in other words, the king must be placed on a square between the two rooks.\n 5) The queen and knights can be located on any remaining square in the rank. \n \nBoth White and Black share the same starting position, drawn at random, in accordance to these rules.\n\nSide note: in accordance with these rules, there are a total of 960 possible starting positions, hence the name of the variant.\n\n**Representation of position**\n\nFor the purpose of this kata:\n - Rooks are abbreviated as R\n - Knights are abbreviated as N\n - Bishops are abbreviated as B\n - Queen is abbreviated as Q\n - King is abbreviated as K\n \nSince black mirrors white's setup, it is enough to list White's position to fully describe the position. Furthermore, only the first rank needs to be defined, as the second rank is filled with pawns regardless of situation.\n \nA starting position is represented by an 8 character long `String`. Each character in the `String` denotes a specific piece, in order from left-to-right.\n\nAn example starting position would be:\n `RNBQKBNR`\n\n**Your task**\n\nGiven a string representation, determine whether it represents a valid Chess960 starting position. Note that the input is guaranteed to represent one king, one queen, two rooks, two bishops and two knights, in some order. You do not have to validate for missing pieces or extra pieces.\n", "totalAttempts": 457, "totalCompleted": 164, "totalStars": 9, "voteScore": 96, "tags": ["Fundamentals", "Algorithms", "Games", "Strings"], "contributorsWanted": true, "unresolved": {"issues": 0, "suggestions": 2}}
{"id": "633bbba75882f6004f9dae4c", "name": "Can you count loop's execution?", "slug": "can-you-count-loops-execution", "category": "algorithms", "publishedAt": "2022-10-04T04:50:51.790Z", "approvedAt": "2022-10-04T09:14:51.017Z", "languages": ["javascript", "factor", "python", "csharp"], "url": "https://www.codewars.com/kata/633bbba75882f6004f9dae4c", "rank": {"id": -7, "name": "7 kyu", "color": "white"}, "createdAt": "2022-10-04T04:50:47.551Z", "createdBy": {"username": "ejini\u6218\u795e", "url": "https://www.codewars.com/users/ejini%E6%88%98%E7%A5%9E"}, "approvedBy": {"username": "dfhwze", "url": "https://www.codewars.com/users/dfhwze"}, "description": "**Introduction**\n\nAs a programmer, one must be familiar with the usage of iterative statements in coding implementations! Depending on the chosen programming language, iterative statements can come in the form of `for`, `while`, `do-while` etc.\n\nBelow is an example of a `nested C-style for-loop`:\n\n```c\nfor(int i = 0; i < A; i++){ \n  // some statements\n  for(int j = 0; j < B; j++){\n    // some statements\n    for(int k = 0; k < C; k++){\n      // some statements\n    }\n  }\n}\n```\nWhere `A`, `B` and `C` are natural numbers.\n\n**Task**\n\nGiven an array of length `N`, where `N` denotes the number of iterative statements. Each item-pair in the array represents two elements, with the `1st value` (`V`) indicating the upper boundary for the iteration to take place (can be inclusive or exclusive depending on the `2nd value`) and the `2nd value` (Boolean data type -> `true` / `false` depending on your chosen language) indicating whether the upper boundary (`V`) is inclusive or not. \n\nYou must write a function that outputs an array in which each element represents the `number of times each for-loop condition is evaluated`. Below is an example for better understanding:\n\n**Example**\n\narr = `[[7, true], [5, false]]`\n\n```c\nfor(int i = 0; i <= 7; i++){   // This statement is executed 9 times before termination -> 0, 1, 2, 3, 4, 5, 6, 7, 8 (since 8 > 7 is the breaking condition)\n  for(int j = 0; j < 5; j++){  // In one cycle of outermost loop, this statement is executed 6 times before termination -> 0, 1, 2, 3, 4, 5 (since 5 >= 5 is the breaking condition)\n    // some statements\n  }\n}\n```\n\n**Note**\n\n* The array can be empty, with a range of `0 <= N <= 20`\n* The starting counter of the `C-style for-loop` is always `0`\n* The iteration expression or operation to be performed is always `incremental`\n* The range of upper boundary is as follows: `1 <= V <= 20`", "totalAttempts": 495, "totalCompleted": 183, "totalStars": 11, "voteScore": 55, "tags": ["Algorithms"], "contributorsWanted": true, "unresolved": {"issues": 0, "suggestions": 0}}
{"id": "61e173ccbc916700267ef2ae", "name": "Triple Crown", "slug": "triple-crown", "category": "reference", "publishedAt": "2022-01-14T13:00:31.472Z", "approvedAt": "2022-01-21T16:23:45.604Z", "languages": ["python", "csharp"], "url": "https://www.codewars.com/kata/61e173ccbc916700267ef2ae", "rank": {"id": -7, "name": "7 kyu", "color": "white"}, "createdAt": "2022-01-14T12:59:56.738Z", "createdBy": {"username": "keczanilles", "url": "https://www.codewars.com/users/keczanilles"}, "approvedBy": {"username": "Siddharth114", "url": "https://www.codewars.com/users/Siddharth114"}, "description": "Welcome to the world of the National Football League!\n\nIn the NFL the Triple Crown is given when a receiver has the most receiving yards, the most receiving touchdowns and the most receptions in a single season. \n\nThis year Cooper Kupp managed to get it, however it is quite rare because the last one was in 2005 by Steve Smith.\n\nNow you will receive a dictionary with the following keys (will always contain each): \n\n- Cooper Kupp\n\n- Justin Jefferson\n\n- Davante Adams\n\nEach key will have another dictionary as their values with the following keys:\n\n- Receiving yards (value between 1500-2000)\n\n- Receiving touchdowns (value between 10-20)\n\n- Receptions (value between 90-120)\n\nIf one receiver has the most in each category you have to return his name. If there is no receiver with the most values in all categories you should return 'None of them'.\n\nExample:\n```python\n{\n  'Cooper Kupp': \n    {\n    'Receiving yards': 1786, \n    'Receiving touchdowns': 18, \n    'Receptions': 117\n    },\n  'Justin Jefferson': \n    {\n    'Receiving yards': 1700, \n    'Receiving touchdowns': 17, \n    'Receptions': 115\n    },\n  'Davante Adams': \n    {\n    'Receiving yards': 1650, \n    'Receiving touchdowns': 16, \n    'Receptions': 110\n    }\n}\n\n# The output should be 'Cooper Kupp' since he has more receiving yards, more receiving touchdowns and more receptions as well\n```\n\nExample with two receivers sharing values in at least one category:\n```python\n{\n  'Cooper Kupp': \n    {\n    'Receiving yards': 1900, \n    'Receiving touchdowns': 18, \n    'Receptions': 117\n    },\n  'Justin Jefferson': \n    {\n    'Receiving yards': 1800, \n    'Receiving touchdowns': 17, \n    'Receptions': 116\n    },\n  'Davante Adams': \n    {\n    'Receiving yards': 1900, \n    'Receiving touchdowns': 18, \n    'Receptions': 110\n    }\n}\n\n# The output should be 'None of them' since they are tied on receiving yards and receiving touchdowns\n```\n\n", "totalAttempts": 1842, "totalCompleted": 255, "totalStars": 15, "voteScore": 67, "tags": ["Fundamentals"], "contributorsWanted": true, "unresolved": {"issues": 0, "suggestions": 1}}
{"id": "55cf3b567fc0e02b0b00000b", "name": "Getting along with Integer Partitions", "slug": "getting-along-with-integer-partitions", "category": "reference", "publishedAt": "2015-08-15T13:19:57.573Z", "approvedAt": "2016-09-07T16:49:13.022Z", "languages": ["ruby", "python", "javascript", "haskell", "java", "csharp", "coffeescript", "clojure", "cpp", "php", "rust", "c", "crystal", "swift", "typescript", "go", "r", "shell", "ocaml", "fsharp", "scala", "julia", "nim", "racket", "reason", "fortran", "dart", "perl", "lua", "pascal", "prolog"], "url": "https://www.codewars.com/kata/55cf3b567fc0e02b0b00000b", "rank": {"id": -4, "name": "4 kyu", "color": "blue"}, "createdAt": "2015-08-15T13:15:03.683Z", "createdBy": {"username": "g964", "url": "https://www.codewars.com/users/g964"}, "approvedBy": {"username": "jhoffner", "url": "https://www.codewars.com/users/jhoffner"}, "description": "From wikipedia <https://en.wikipedia.org/wiki/Partition_(number_theory)> \n\nIn number theory and combinatorics, a partition of a positive integer n, also called an integer partition, \nis a way of writing n as a sum of positive integers. \nTwo sums that differ only in the order of their summands are considered the **same** partition.\n\nFor example, 4 can be partitioned in five distinct ways:\n\n`4, 3 + 1, 2 + 2, 2 + 1 + 1, 1 + 1 + 1 + 1`.\n\nWe can write:\n\n`enum(4) -> [[4],[3,1],[2,2],[2,1,1],[1,1,1,1]]` and\n\n`enum(5) -> [[5],[4,1],[3,2],[3,1,1],[2,2,1],[2,1,1,1],[1,1,1,1,1]]`.\n\nThe number of parts in a partition grows very fast.\nFor n = 50 number of parts is `204226`, for 80 it is `15,796,476`\nIt would be too long to tests answers with arrays of such size. So our task is the following:\n\n1 - n being given (n integer, 1 <= n <= 50) calculate enum(n) ie the partition of n.\nWe will obtain something like that:  \n`enum(n) -> [[n],[n-1,1],[n-2,2],...,[1,1,...,1]]` (order of array and sub-arrays\ndoesn't matter). This part is not tested.\n\n2 - For each sub-array of enum(n) calculate its product. \nIf n = 5 we'll obtain **after removing duplicates and sorting**:\n\n`prod(5) -> [1,2,3,4,5,6]`\n\n`prod(8) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 16, 18]`\n\nIf n = 40 prod(n) has a length of `2699` hence the tests will not verify such arrays.\nInstead our task number 3 is:\n\n3 - return the range, the average and the median of prod(n) in the following form \n(example for n = 5):\n\n`\"Range: 5 Average: 3.50 Median: 3.50\"`\n\nRange is an integer, Average and Median are float numbers rounded to two decimal \nplaces (\".2f\" in some languages).\n\n#### Notes:\n`Range` : difference between the highest and lowest values. \n\n`Mean or Average` : To calculate mean, add together all of the numbers \nin a set and then divide the sum by the total count of numbers.\n\n`Median` : The median is the number separating the higher half \nof a data sample from the lower half. \n(https://en.wikipedia.org/wiki/Median)\n\n#### Hints:\nTry to optimize your program to avoid timing out.\n\nMemoization can be helpful but it is not mandatory for being successful.\n", "totalAttempts": 24330, "totalCompleted": 2707, "totalStars": 891, "voteScore": 456, "tags": ["Fundamentals", "Algorithms"], "contributorsWanted": true, "unresolved": {"issues": 2, "suggestions": 1}}
{"id": "62c93765cef6f10030dfa92b", "name": "Cats and shelves", "slug": "cats-and-shelves", "category": "algorithms", "publishedAt": "2022-07-10T03:51:59.565Z", "approvedAt": "2022-09-23T19:44:39.400Z", "languages": ["csharp", "javascript", "python", "ruby", "java", "go", "php"], "url": "https://www.codewars.com/kata/62c93765cef6f10030dfa92b", "rank": {"id": -7, "name": "7 kyu", "color": "white"}, "createdAt": "2022-07-09T08:08:05.579Z", "createdBy": {"username": "RealSup", "url": "https://www.codewars.com/users/RealSup"}, "approvedBy": {"username": "anter69", "url": "https://www.codewars.com/users/anter69"}, "description": "## Description\nAn infinite number of shelves are arranged one above the other in a staggered fashion.<br>\nThe cat can jump up to 3 shelves at the same time: from shelf 1 to shelf 2 or 4 (the cat cannot climb on the shelf directly above its head), according to the illustration:\n\n```\n                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                 \u2502-6------\u2502\n                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \n\u2502------5-\u2502        \n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u250c\u2500\u2500\u2500\u2500\u2500\u25ba OK!\n            \u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502    \u2502-4------\u2502\n            \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502------3-\u2502  \u2502     \nBANG!\u2500\u2500\u2500\u2500\u2518  \u251c\u2500\u2500\u2500\u2500\u2500\u25ba OK! \n  \u25b2  |\\_/|  \u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2502 (\"^-^)  \u2502    \u2502-2------\u2502\n  \u2502 )   (   \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2518\n\u2502------1-\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n\n## Input\nStart and finish shelf numbers (always positive integers, finish no smaller than start)\n\n\n## Task\nFind the minimum number of jumps to go from start to finish\n\n\n## Example\nStart ```1```, finish ```5```, then answer is ```2``` ```(1 => 4 => 5 or 1 => 2 => 5)```\n\n## Inspirers\n\n![inspirers](https://i.ibb.co/BymvZtL/Inspirers.jpg)\n", "totalAttempts": 6753, "totalCompleted": 999, "totalStars": 27, "voteScore": 146, "tags": ["Algorithms"], "contributorsWanted": true, "unresolved": {"issues": 0, "suggestions": 0}}
{"id": "54cb771c9b30e8b5250011d4", "name": "Faberg\u00e9 Easter Eggs crush test", "slug": "faberge-easter-eggs-crush-test", "category": "algorithms", "publishedAt": "2015-01-30T20:30:42.507Z", "approvedAt": "2017-07-24T14:46:00.474Z", "languages": ["haskell", "python", "java", "dart", "ruby", "csharp", "go", "javascript", "scala", "kotlin", "groovy", "clojure", "idris"], "url": "https://www.codewars.com/kata/54cb771c9b30e8b5250011d4", "rank": {"id": -3, "name": "3 kyu", "color": "blue"}, "createdAt": "2015-01-30T12:20:45.107Z", "createdBy": {"username": "Ivana", "url": "https://www.codewars.com/users/Ivana"}, "approvedBy": {"username": "ice1000", "url": "https://www.codewars.com/users/ice1000"}, "description": "One man (lets call him Eulampy) has a collection of some almost identical Faberg\u00e9 eggs. One day his friend Tempter said to him:\n\n> + Do you see that skyscraper? And can you tell me a maximal floor that if you drop your egg from will not crack it?\n> + No, - said Eulampy.\n> + But if you give me N eggs, - says Tempter - I'l tell you an answer.\n> + Deal - said Eulampy. But I have one requirement before we start this: if I will see more than M falls of egg, my heart will be crushed instead of egg. So you have only M trys to throw eggs. Would you tell me an exact floor with this limitation?\n\n## Task\n\nYour task is to help Tempter - write a function\n\n```haskell\nheight :: Integer -> Integer -> Integer\nheight n m = -- see text\n```\n\nthat takes 2 arguments - the number of eggs `n` and the number of trys `m` - you should calculate maximum scyscrapper height (in floors), in which it is guaranteed to find an exactly maximal floor from which that an egg won't crack it.\n\nWhich means,\n\n0. You can throw an egg from a specific floor every try\n0. Every egg has the same, certain durability - if they're thrown from a certain floor or below, they won't crack. Otherwise they crack.\n0. You have `n` eggs and `m` tries\n0. What is the maxmimum height, such that you can always determine which floor the target floor is when the target floor can be any floor between `1` to this maximum height?\n\n\n## Examples\n\n```\nheight 0 14 = 0\nheight 2 0  = 0\nheight 2 14 = 105\nheight 7 20 = 137979\n```\n\n## Data range\n\n```\nn <= 20000\nm <= 20000\n```\n", "totalAttempts": 10196, "totalCompleted": 1420, "totalStars": 640, "voteScore": 250, "tags": ["Mathematics", "Dynamic Programming", "Performance", "Algorithms"], "contributorsWanted": true, "unresolved": {"issues": 6, "suggestions": 4}}
{"id": "631082840289bf000e95a334", "name": "I Will  Take the Biggest One and Nothing Else.", "slug": "i-will-take-the-biggest-one-and-nothing-else", "category": "reference", "publishedAt": "2022-09-01T11:47:41.482Z", "approvedAt": "2022-09-03T17:22:29.596Z", "languages": ["python", "javascript", "csharp", "c", "ruby", "typescript", "cobol", "java"], "url": "https://www.codewars.com/kata/631082840289bf000e95a334", "rank": {"id": -7, "name": "7 kyu", "color": "white"}, "createdAt": "2022-09-01T09:59:32.862Z", "createdBy": {"username": "raulbc777", "url": "https://www.codewars.com/users/raulbc777"}, "approvedBy": {"username": "zLuki", "url": "https://www.codewars.com/users/zLuki"}, "description": "We have a positive integer ```N, N > 0```.\n\nWe have a special integer ```N1, N1 > N```, such that \n```N1 = c \u2027 d``` and ```N = c + d``` with the constraint that ```c \u2260 d```\n\nLet\u00b4s see an example:\n```\nN = 26 (starting integer)\n```\nThe next integer ```N1```, chained with this property  with ```N```, will be ```48```.\n\nBecause:\n```\nN1 = 2 x 24 = 48\nN = 2 + 24 = 26\n```\nBut there are another integers chained with ```N``` with the property shown above. In effect the next integer ```N2 = 69```\n\nLet\u00b4s see:\n```\nN2 = 3 x 23 = 69\nN = 3 + 23 = 26\n```\nThe next integer ```N3``` is ```88``` and you may figure out the values for ```c``` and ```d```.\n\nIf we continue working trying to find the successive values of ```Ni``` for our starting integer ```N = 26``` we will find the following chain.\n```\n26 (N) --> 48 (N1) --> 69 (N2) --> 88 (N3) --> ........... --> 160 (N9) --> 165 (N10) --> 168 (N11)\n```\nYou may work to obtain the intermediate values of the above incomplete chain for the starting integer```26```\n\nIn the example above ```169``` is discarded as a solution, because as we said before ```c``` and ```d``` should be different.\n\nThe task for this exercise is the following:\n\n*Given a starting integer you have to find the maximum chained integer that fulfills the property explained above*\n\nYour code should output an integer in all cases.\nYou will receive always an integer as an input.\n\nSpecial Cases\n\n* If your starting integer is less than ```5```, we do not have a result higher than your starting integer. In those cases your code should output ```-1```. As an example:\n\n```\ninput:4; output:-1\n```\nYou will see more examples in the fixed examples of the sample box.\nYou have to pass 200 random tests and the values for the starting ```N``` are in the following range:\n\n```\n10 < N < 1 x 10^14\n```\n\nI hope that this challenge will be useful for all the coding lovers.\n\nSpecial Acknowledgements for two Codewarriors: Unnamed and macambira for their observations done in the beta phase.", "totalAttempts": 1922, "totalCompleted": 488, "totalStars": 18, "voteScore": 104, "tags": ["Mathematics"], "contributorsWanted": true, "unresolved": {"issues": 1, "suggestions": 0}}
{"id": "62b76a4f211432636c05d0a9", "name": "Mathemagics: the 21 Cards Trick", "slug": "mathemagics-the-21-cards-trick", "category": "games", "publishedAt": "2022-09-02T21:12:56.384Z", "approvedAt": "2022-09-03T13:40:20.901Z", "languages": ["python", "ruby", "javascript", "c"], "url": "https://www.codewars.com/kata/62b76a4f211432636c05d0a9", "rank": {"id": -7, "name": "7 kyu", "color": "white"}, "createdAt": "2022-06-25T20:04:31.566Z", "createdBy": {"username": "macambira", "url": "https://www.codewars.com/users/macambira"}, "approvedBy": {"username": "zLuki", "url": "https://www.codewars.com/users/zLuki"}, "description": "> The Twenty-One Card Trick, also known as the 11th card trick or three column trick, is a simple self-working card trick that uses basic mathematics to reveal the user's selected card.  \n> The game uses a selection of 21 cards out of a standard deck. These are shuffled and the player selects one at random. The cards are then dealt out face up in three columns of 7 cards each. The player points to the column containing their card. The cards are picked up and the process is repeated three times, at which point the magician reveals the selected card.\n\nSource: [Wikipedia](https://en.wikipedia.org/wiki/Twenty-One_Card_Trick)\n\nYour task is to implement an algorithm that is able to execute the Twenty-One Card Trick. To simplify things, the cards will be changed to the set of integers between 1 and 21(inclusive). The function will be passed as argument a member of the audience that has selected a certain card and has a method ```get_input``` that receives a list of 3 lists as arguments and returns the index of the column contained the selected card. Example:\n\n```python\naudience = Audience(13) # The audience member has selected the card 13\n\n> audience.get_input([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]])\n1 # Since 13 is at the 2nd column\n```\n```ruby\naudience = Audience.new 13\n\n> audience.get_input [[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]]\n1 # Since 13 is at the 2nd column\n```\n```javascript\nconst audience = new Audience(13);\n\n> audience.getInput([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]]);\n1 // Since 13 is at the 2nd column\n```\n```c\n// In C there is no audience object, you call get_input() directly:\nget_input((int[]){1,2,3,4,5,6,7}, (int[]){8,9,10,11,12,13,14}, (int[]) {15,16,17,18,19,20,21});\n// == 1, since 13 is in the 2nd column\n```\n\nAfter 3 times it is asked, however, the audience member no longer will give an answer. Use these three functions invokations to discover which card the audience member has.", "totalAttempts": 2140, "totalCompleted": 188, "totalStars": 14, "voteScore": 50, "tags": ["Algorithms", "Mathematics"], "contributorsWanted": true, "unresolved": {"issues": 0, "suggestions": 2}}
{"id": "578b8c0e84ac69a4d20004c8", "name": "What's your running pace?", "slug": "whats-your-running-pace", "category": "algorithms", "publishedAt": "2016-07-17T19:29:53.415Z", "approvedAt": "2016-11-09T14:10:42.831Z", "languages": ["javascript", "typescript", "python", "java"], "url": "https://www.codewars.com/kata/578b8c0e84ac69a4d20004c8", "rank": {"id": -6, "name": "6 kyu", "color": "yellow"}, "createdAt": "2016-07-17T13:45:50.833Z", "createdBy": {"username": "int3_0xcc", "url": "https://www.codewars.com/users/int3_0xcc"}, "approvedBy": {"username": "myjinxin2015", "url": "https://www.codewars.com/users/myjinxin2015"}, "description": "In this Kata, we will calculate running pace. To do that, we have to know the distance and the time. \n\nCreate the following function:\n\n```if:python\n`running_pace(distance, time)`\n```\n```if:javascript, typescript\n`runningPace(distance, time)`\n```\n\nWhere:\n`distance` - A float with the number of kilometres\n\n`time` - A string containing the time it took to travel the distance. It will always be minutes:seconds. For example \"25:00\" means 25 minutes. You don't have to deal with hours.\n\nThe function should return the pace, for example \"4:20\" means it took 4 minutes and 20 seconds to travel one kilometre.\n\n**Note**: The pace should always return only the number of minutes and seconds. You don't have to convert these into hours. Floor the number of seconds.\n\n", "totalAttempts": 4713, "totalCompleted": 792, "totalStars": 26, "voteScore": 135, "tags": ["Mathematics", "Strings", "Algorithms", "Date Time"], "contributorsWanted": true, "unresolved": {"issues": 2, "suggestions": 4}}
{"id": "6319dba6d6e2160015a842ed", "name": "Count the photos!", "slug": "count-the-photos", "category": "algorithms", "publishedAt": "2022-09-08T12:17:04.666Z", "approvedAt": "2022-09-09T08:03:57.135Z", "languages": ["javascript", "c", "python", "cpp", "lua"], "url": "https://www.codewars.com/kata/6319dba6d6e2160015a842ed", "rank": {"id": -6, "name": "6 kyu", "color": "yellow"}, "createdAt": "2022-09-08T12:10:14.945Z", "createdBy": {"username": "billgewrgoulas", "url": "https://www.codewars.com/users/billgewrgoulas"}, "approvedBy": {"username": "zLuki", "url": "https://www.codewars.com/users/zLuki"}, "description": "In a string we describe a road. There are cars that move to the right and we denote them with \">\" and cars that move to the left and we denote them with \"<\". There are also cameras that are indicated by: \" . \". \n<br>\nA camera takes a photo of a car if it moves to the direction of the camera.\n\n<b style=\"font-size: 20px;\">Task</b> <br>\nYour task is to write a function such that, for the input string that represents a road as described, returns the total number of photos that were taken by the cameras. The complexity should be strictly O(N) in order to pass all the tests. \n\n<br>\n<b>Examples</b>\n\n```javascript\nFor \">>.\" -> 2 photos were taken\nFor \".>>\" -> 0 photos were taken\nFor \">.<.\" -> 3 photos were taken\nFor \".><.>>.<<\" -> 11 photos were taken\n```", "totalAttempts": 1984, "totalCompleted": 704, "totalStars": 48, "voteScore": 167, "tags": ["Algorithms", "Performance", "Arrays"], "contributorsWanted": true, "unresolved": {"issues": 1, "suggestions": 0}}
{"id": "62cb487e43b37a5829ab5752", "name": "Google Dorking - Validating Queries", "slug": "google-dorking-validating-queries", "category": "reference", "publishedAt": "2022-07-10T23:26:04.732Z", "approvedAt": "2022-08-16T05:25:17.897Z", "languages": ["python", "javascript"], "url": "https://www.codewars.com/kata/62cb487e43b37a5829ab5752", "rank": {"id": -7, "name": "7 kyu", "color": "white"}, "createdAt": "2022-07-10T21:45:34.223Z", "createdBy": {"username": "chr3st5an", "url": "https://www.codewars.com/users/chr3st5an"}, "approvedBy": {"username": "khanhtranngoccva", "url": "https://www.codewars.com/users/khanhtranngoccva"}, "description": "# Description\n\n---\n\nThe term \"google dorking\" describes the process of using \nfilters (also called \"operators\") in google search \nqueries which limit the search results according to the \nused filters. It's a technique often used by \"hackers\" \nin order to find valuable information about a target. \n*But thats not what we do here*\n\nThe syntax of most filters looks as following: `<filter>:<value>`\n\nHence, a complete search query could look like\n\n```\nintext:kyu site:codewars.com \n```\n\nIf you enter the above query into Googles search bar, your results\nare limited to **codewars.com** and every result page should\ncontain the word **kyu**.\n\n*Pretty useful, huh?*\n\n---\n\n## Task\n\nA coder friend of yours gave you some queries which -he promises- will\nreturn interesting results. But some of the queries contain outdated \nfilters which don't work anymore. Hence, you decide to code a function\nnamed `is_valid` (`isValid` for js) which takes in a search query of \ntype `str` and validates that every filter within the query is up-to-date. \nIf only one filter is invalid, then the entire query is invalid.\n\n---\n\n## Preloaded\n\n~~~if:python\n\n`FILTERS` - A tuple of **valid** search filters\n\n~~~\n\n~~~if:javascript\n\n`FILTERS` - An array of **valid** search filters\n\n~~~\n\n---\n\n## Note\n\n- A search query will contain `0 < n < 100` filters\n\n~~~if:python\n\n- Your function should return `True` for valid and `False` for invalid\n\n~~~\n\n~~~if-not:python\n\n- Your function should return `true` for valid and `false` for invalid\n\n~~~\n\n- Each filter follows the `<filter-name>:<value>` syntax\n\n  - Filters are seperated by a space (\\s) \n \n- You only need to check if the filter-name is valid\n\n  - For a filter-name to be valid, the FILTERS array must contain this filter-name.\n  \n---\n\n## Fun Fact\n\n```\nintext:\"google dorking\" site:codewars.com\n```\n\nEntering the above query into Googles search bar will give you a link to this kata! (this link used to be the only result of this query until the approval of this kata, since then the query has also showed pages that have this kata in the ```similar katas``` section)\n\n---\n\n*Good Luck :)*", "totalAttempts": 788, "totalCompleted": 237, "totalStars": 9, "voteScore": 105, "tags": ["Regular Expressions"], "contributorsWanted": true, "unresolved": {"issues": 0, "suggestions": 0}}
{"id": "62d34faad32b8c002a17d6d9", "name": "Page replacement algorithms: FIFO", "slug": "page-replacement-algorithms-fifo", "category": "algorithms", "publishedAt": "2022-08-05T20:07:42.428Z", "approvedAt": "2022-08-06T13:04:14.047Z", "languages": ["python", "javascript"], "url": "https://www.codewars.com/kata/62d34faad32b8c002a17d6d9", "rank": {"id": -7, "name": "7 kyu", "color": "white"}, "createdAt": "2022-07-16T23:54:18.145Z", "createdBy": {"username": "yLaWy", "url": "https://www.codewars.com/users/yLaWy"}, "approvedBy": {"username": "donaldsebleung", "url": "https://www.codewars.com/users/donaldsebleung"}, "description": "In a computer operating system that uses paging for virtual memory management, page replacement algorithms decide which memory pages to page out when a page of memory needs to be allocated. Page replacement happens when a requested page is not in memory (page fault) and a free page cannot be used to satisfy the allocation, either because there are none, or because the number of free pages is lower than some threshold.\n\n## The FIFO page replacement algorithm\nThe first-in, first-out (FIFO) page replacement algorithm is a low-overhead algorithm that requires little bookkeeping on the part of the operating system. The idea is obvious from the name: the operating system keeps track of all the pages in memory in a queue, with the most recent arrival at the back, and the oldest arrival in front. When a page needs to be replaced, the oldest page is selected. Note that a page already in the queue is not pushed at the end of the queue if it is referenced again.<br>\n\nYour task is to implement this algorithm. The ```fifo``` function will take two parameters as input: the number of maximum pages that can be kept in memory at the same time ```n``` and a ```reference list``` containing numbers. Every number represents a page request for a specific page (you can see this number as the unique ID of a page). The expected output is the status of the memory after the application of the algorithm. Note that when a page is inserted in the memory, it stays at the same position until it is removed from the memory by a page fault.\n\n## Example:\nGiven:\n  * N = 3,\n  * REFERENCE LIST = \\[1, 2, 3, 4, 2, 5\\],\n\n\n```\n  * 1 is read, page fault --> memory = [1];\n  * 2 is read, page fault --> memory = [1, 2];\n  * 3 is read, page fault --> memory = [1, 2, 3];\n  * 4 is read, page fault --> memory = [4, 2, 3];\n  * 2 is read, already in memory, nothing happens;\n  * 5 is read, page fault --> memory = [4, 5, 3].\n```\n\nSo, at the end we have the list ```[4, 5, 3]```, which is what you have to return. If not all the slots in the memory get occupied after applying the algorithm, fill the remaining slots (at the end of the list) with ```-1``` to represent emptyness (note that the IDs will always be >= 1).\n", "totalAttempts": 526, "totalCompleted": 219, "totalStars": 11, "voteScore": 77, "tags": ["Algorithms", "Lists"], "contributorsWanted": true, "unresolved": {"issues": 0, "suggestions": 0}}
{"id": "62f96f01d67d0a0014f365cf", "name": "Street Bowling", "slug": "street-bowling-1", "category": "reference", "publishedAt": "2022-08-15T03:58:54.317Z", "approvedAt": "2022-08-19T19:04:05.447Z", "languages": ["python", "javascript", "c"], "url": "https://www.codewars.com/kata/62f96f01d67d0a0014f365cf", "rank": {"id": -7, "name": "7 kyu", "color": "white"}, "createdAt": "2022-08-14T21:54:09.298Z", "createdBy": {"username": "Yeetboii1", "url": "https://www.codewars.com/users/Yeetboii1"}, "approvedBy": {"username": "zLuki", "url": "https://www.codewars.com/users/zLuki"}, "description": "**SITUATION**\n\nImagine you are trying to roll a ball a certain distance down a road. The ball will have a starting speed that slowly degrades due to friction and cracks in the road. Every time the ball rolls a distance equal to its speed or rolls over a crack, its speed decreases by 1. Given a speed of s which the ball starts rolling, and a roadmap r of the street represented by a string, return whether or not the ball will be able to make it past the end of the road (True or False).\n\n**NOTES**\n\n- A ball with 0 speed is motionless.\n\n- If a ball happens to roll over a crack, the speed decrease must only take effect after the ball has rolled a distance equal to its speed. For example, if the speed was 10, but the ball hit 2 cracks before rolling 10 distance, the ball's speed should stay at 10 until it has reached 10 distance, in which the speed should decrease to 7 (-2 from cracks and -1 due to friction).\n\n- On the roadmap, \"_\" represents flat ground and \"x\" represents a crack\n\n- The length of the roadmap will be equal to the distance to the ball's final destination\n\n- The ball must reach the last tile of the road for the solution to be considered valid.\n\n**EXAMPLES**\n\n- A speed of 100, and a roadmap of '_' should return True because the ball would be moving too quickly for friction to be applied and there are no cracks on the road.\n\n- A speed of 1, and a roadmap of '___________' should return False because friction would stop the ball after 1 distance\n", "totalAttempts": 1450, "totalCompleted": 191, "totalStars": 12, "voteScore": 66, "tags": ["Algorithms", "Strings"], "contributorsWanted": true, "unresolved": {"issues": 0, "suggestions": 0}}
{"id": "586c7cd3b98de02ef60001ab", "name": "Unique Strings", "slug": "unique-strings", "category": "algorithms", "publishedAt": "2017-01-04T05:10:47.060Z", "approvedAt": "2017-12-14T15:16:55.026Z", "languages": ["elixir", "ruby", "python", "haskell", "rust", "d", "go", "javascript"], "url": "https://www.codewars.com/kata/586c7cd3b98de02ef60001ab", "rank": {"id": -6, "name": "6 kyu", "color": "yellow"}, "createdAt": "2017-01-04T04:40:51.143Z", "createdBy": {"username": "aditya7iyengar", "url": "https://www.codewars.com/users/aditya7iyengar"}, "approvedBy": {"username": "raulbc777", "url": "https://www.codewars.com/users/raulbc777"}, "description": "Given a string that contains only letters, you have to find out the number of **unique** strings (including the string itself) that can be produced by re-arranging the letters of the string. Strings are case **insensitive**.\n\nHINT: Generating all the unique strings and calling `length` on that isn't a great solution for this problem. It can be done a lot faster...\n\n## Examples\n\n```python\nuniqcount(\"AB\") = 2      # \"AB\", \"BA\"\nuniqcount(\"ABC\") = 6     # \"ABC\", \"ACB\", \"BAC\", \"BCA\", \"CAB\", \"CBA\"\nuniqcount(\"ABA\") = 3     # \"AAB\", \"ABA\", \"BAA\"\nuniqcount(\"ABBb\") = 4    # \"ABBB\", \"BABB\", \"BBAB\", \"BBBA\"\nuniqcount(\"AbcD\") = 24   # \"ABCD\", etc.\n```\n```javascript\nuniqCount(\"AB\") = 2n      // \"AB\", \"BA\"\nuniqCount(\"ABC\") = 6n     // \"ABC\", \"ACB\", \"BAC\", \"BCA\", \"CAB\", \"CBA\"\nuniqCount(\"ABA\") = 3n     // \"AAB\", \"ABA\", \"BAA\"\nuniqCount(\"ABBb\") = 4n    // \"ABBB\", \"BABB\", \"BBAB\", \"BBBA\"\nuniqCount(\"AbcD\") = 24n   // \"ABCD\", etc.\n\n// Note that you should return a BigInt, not a Number\n```", "totalAttempts": 3184, "totalCompleted": 303, "totalStars": 40, "voteScore": 113, "tags": ["Algorithms"], "contributorsWanted": true, "unresolved": {"issues": 4, "suggestions": 0}}
